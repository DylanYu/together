package together.activity; import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONException;import together.connectivity.JsonHandler;import together.connectivity.MySimpleAdapter;import together.models.MessagePost;import together.utils.AssetsUtil;import together.utils.MyConstants;import together.widgets.PullToRefreshList;import android.app.ListActivity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.TextView;public class MessageListActivity extends ListActivity{		private TextView button_send;	private TextView button_followed;	private PullToRefreshList listView;	private ArrayList<HashMap<String, Object>> listArray = new ArrayList<HashMap<String, Object>>();	private HashMap<String, Object> map_use;	private MySimpleAdapter listAdapter;	private Context context;	private View loadMoreView;	private TextView loadMoreButton;	private int last_star_id;	private int last_followed_id;	private String msgGet = "";	private boolean indicateMessageFollowedFlag = false;// default = star , other - dj	private boolean bottomFlag = false;	private ProgressDialog progressDialog; 	//	public void onBackPressed() {//		new AlertDialog.Builder(this)//				.setTitle(R.string.exit)//				.setMessage(R.string.sure_exit)//				.setPositiveButton(R.string.positive_btn,//						new DialogInterface.OnClickListener() {//							@Override//							public void onClick(DialogInterface dialog,//									int which) {//								finish();//							}//						})//				.setNegativeButton(R.string.negative_btn,//						new DialogInterface.OnClickListener() {//							@Override//							public void onClick(DialogInterface dialog,//									int which) {//							}//						}).show();//	}	public void onDestroy() {		if (progressDialog != null)			progressDialog.dismiss();		 		super.onDestroy();	}	 @Override	    public void onCreate(Bundle savedInstanceState) {	        super.onCreate(savedInstanceState);	        setContentView(R.layout.msg);	        	        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);	        	        	        context = this;			initUI();			try {				progressDialog.show();				build_post_list();			} catch (Exception e) {				e.printStackTrace();			}	 }	private void initUI() {		listView = ((PullToRefreshList) getListView());		listView.setCacheColorHint(0);		progressDialog = new ProgressDialog(context);		progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);		progressDialog.setIcon(R.drawable.loading);		progressDialog.setMessage(getString(R.string._loading));		 		loadMoreView = getLayoutInflater().inflate(R.layout.loadmore, null);		loadMoreButton = (TextView) loadMoreView				.findViewById(R.id.loadMoreButton);		loadMoreButton.setText(R.string._more);		loadMoreButton.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				loadMoreButton.setText(R.string._loading);				progressDialog.show();				new ClickGetDataTask().execute();			}		});		listView.addFooterView(loadMoreView);		listView.setOnRefreshListener(new together.widgets.PullToRefreshList.OnRefreshListener() {			@Override			public void onRefresh() {				new PullGetDataTask().execute();			}		});		button_send = (TextView) findViewById(R.id.mySendText);		button_followed = (TextView) findViewById(R.id.myFollowedText);		button_send.setOnClickListener(new OnMessagePostClickListener());		button_followed.setOnClickListener(new OnMessageFollowedClickListener());	}	 	 	 private class PullGetDataTask extends AsyncTask<Void, Void, String[]> {			@Override			protected String[] doInBackground(Void... params) {				// Simulates a background job.				if (indicateMessageFollowedFlag == false) {					try {						bottomFlag = false;						build_post_list();					} catch (JSONException e) {						e.printStackTrace();					} catch (IOException e) {						e.printStackTrace();					}				} else {					try {						bottomFlag = false;						build_followed_list();					} catch (JSONException e) {						e.printStackTrace();					} catch (IOException e) {						e.printStackTrace();					}				}				return null;			}			@Override			protected void onPostExecute(String[] result) {				// Call onRefreshComplete when the list has been refreshed.				((PullToRefreshList) getListView()).onRefreshComplete();				super.onPostExecute(result);			}		}		/**		 * asyntask , used when click loadmore button of listview to refresh data		 * */		private class ClickGetDataTask extends AsyncTask<Void, Void, String[]> {			@Override			protected String[] doInBackground(Void... params) {				// Simulates a background job.				bottomFlag = true;				loadMoreData(true);// add to bottom				return null;			}			@Override			protected void onPostExecute(String[] result) {				// Call onRefreshComplete when the list has been refreshed.				progressDialog.cancel();				super.onPostExecute(result);			}		}		private Handler listHandler = new Handler() {// this is used to generate the														// groups listview			public void handleMessage(Message msg) {				switch (msg.what) {				case MyConstants.MSG_SUCCESS1:					@SuppressWarnings("unchecked")					final ArrayList<HashMap<String, Object>> array = (ArrayList<HashMap<String, Object>>) msg.obj;					loadMoreButton.setText(R.string._more);					listAdapter = new MySimpleAdapter(context, array,							R.layout.list_item, new String[] { "name",									"time", "event" }, new int[] {									R.id.sItemTitle, R.id.sItemTime, R.id.sItemInfo },							120);					listView.setAdapter(listAdapter);					listArray = array;					listView.setVisibility(View.GONE);					listAdapter.notifyDataSetChanged();					listView.setVisibility(View.VISIBLE);					if (bottomFlag)						listView.setSelectionFromTop(								listAdapter.GetmData().size() - 1, 150);					progressDialog.cancel();					listView.setOnItemClickListener(new OnItemClickListener() {						@Override						public void onItemClick(AdapterView<?> arg0, View arg1,								int arg2, long arg3) {							if (arg2 > listArray.size()) {								return;							}							Intent intent = new Intent();							if (arg2 > 0)								arg2--;							intent.putExtra("id",									(String) listArray.get(arg2).get("id"));							intent.putExtra("name", (String) listArray.get(arg2)									.get("name"));							intent.putExtra("time",									(String) listArray.get(arg2).get("time"));							intent.putExtra("event", (String) listArray.get(arg2)									.get("event"));							 							if (indicateMessageFollowedFlag == false)								intent.setClass(MessageListActivity.this,										PostedMessageActivity.class);							else								intent.setClass(MessageListActivity.this,										FollowedMessageActivity.class);							startActivity(intent);						}					});					break;				case MyConstants.MSG_FAILURE:					progressDialog.cancel(); 					if (msgGet == null || msgGet.equals("[]")) {						loadMoreButton.setText(R.string.no_more);						if (bottomFlag)							listView.setSelectionFromTop(listAdapter.GetmData()									.size() - 1, 150);					} else						loadMoreButton.setText(R.string._more);					break;				}			}		};		private void loadMoreData(boolean bottom) {			try {				if (indicateMessageFollowedFlag == false)					add_post_list(bottom);				else					add_followed_list(bottom);			} catch (JSONException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}		private void build_post_list() throws JSONException, IOException {			final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();			new Thread() {				public void run() {					String s = null; 					try { 						s = AssetsUtil.getFromAssets(context, "star.json");						if (s == null) {							msgGet = s;							Log.d("MessagePostActivity", "null response");							listHandler.obtainMessage(MyConstants.MSG_FAILURE)									.sendToTarget();							return;						}						if (s.equals("[]")) {							// 说明没有更多新闻了，此时msgGet="[]"							msgGet = s;							listHandler.obtainMessage(MyConstants.MSG_FAILURE)									.sendToTarget();							return;						}						JsonHandler jsonHandler = new JsonHandler();						List<MessagePost> stars = jsonHandler.getMessages(s);						HashMap<String, Object> map; 						for (MessagePost p : stars) {							map = getMessageMap(p);							Array.add(map);						}						last_star_id = stars.size();					} catch (JSONException e) {						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();						e.printStackTrace();						return;					}					if (Array.size() == 0) {						listHandler.obtainMessage(MyConstants.MSG_FAILURE)								.sendToTarget();					} else {						listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, Array)								.sendToTarget();					}				}			}.start();		}		private HashMap<String, Object> getMessageMap(MessagePost p) {			HashMap<String, Object> map;			map = new HashMap<String, Object>();			String id = p.getId();			String name = p.getName();			 			map.put("name", name);			map.put("id", id);			map.put("time", p.getTime()); 			map.put("event", p.getEvent()); 			return map;		}		private void add_post_list(final boolean bottom) throws JSONException,				IOException {			String s = null;			 			s = AssetsUtil.getFromAssets(context, "star.json");			if (s == null) {				Log.d("MessagePostActivity", "null response");				msgGet = s;				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();				return;			}			if (s.equals("[]")) {				// 说明没有更多新闻了，此时msgGet="[]"				msgGet = s;				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();				return;			}			JsonHandler jsonHandler = new JsonHandler();			List<MessagePost> stars = jsonHandler.getMessages(s); 			ArrayList<HashMap<String, Object>> array = new ArrayList<HashMap<String, Object>>();			for (int i = 0; i < listAdapter.GetmData().size(); i++)				array.add(listAdapter.GetmData().get(i));			for (MessagePost p : stars) {				 				map_use = getMessageMap(p);				array.add(map_use);			}			last_star_id += stars.size();			if (stars.size() == 0) {				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();			} else {				listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, array)						.sendToTarget();			}		}		private void build_followed_list() throws JSONException, IOException {			final ArrayList<HashMap<String, Object>> Array = new ArrayList<HashMap<String, Object>>();			new Thread() {				public void run() {					String s = null;//					String http_url = "/djs.json?start=0&count=" + MyConstants.DJ;					try {						s = AssetsUtil.getFromAssets(context, "star.json");;//MyHttpResponse.getResponse(http_url);						if (s == null) {							Log.d("MessagePostActivity", "null response");							return;						}						if (s.equals("[]")) {							// 说明没有更多新闻了，此时msgGet="[]"							msgGet = s;							return;						}						JsonHandler jsonHandler = new JsonHandler();						List<MessagePost> msgs = jsonHandler.getMessages(s);						HashMap<String, Object> map; 						for (MessagePost p : msgs) {							map = getMessageMap(p);							Array.add(map);						}						last_followed_id = msgs.size();					} catch (JSONException e) {						e.printStackTrace();					} finally {						if (Array.size() == 0) {							listHandler.obtainMessage(MyConstants.MSG_FAILURE)									.sendToTarget();						} else {							listHandler.obtainMessage(MyConstants.MSG_SUCCESS1,									Array).sendToTarget();						}					}				}			}.start();		}//		private HashMap<String, Object> getDJMap(MessagePost p) {//			HashMap<String, Object> map;//			map = new HashMap<String, Object>();//			String url = p.getUrl();//			String large_url = p.getLargeUrl();//			String title = p.getName();//			String description = p.getDescription();//			String desc = description;//			if (description.length() > 29) {//				desc = description.substring(0, 28);//				desc += "...";//			}//			map.put("weibo_url", p.getWeibo_url());//			map.put("url", large_url);//			map.put("imgsrc", MyConstants.SITE + url);//			map.put("desc", desc);//			map.put("title", title);//			map.put("description", description);//			return map;//		}		private void add_followed_list(final boolean bottom) throws JSONException,				IOException {//			String s = null;//			String http_url = "/djs.json?start=" + last_dj_id + "&count="//					+ MyConstants.DJ;//			s = MyHttpResponse.getResponse(http_url);//			if (s == null) {//				Log.d("MessagePostActivity", "null response");//				msgGet = s;//				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();//				return;//			}//			if (s.equals("[]")) {//				msgGet = s;//				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();//				return;//			}//			JsonHandler jsonHandler = new JsonHandler();//			List<MessagePost> djs = jsonHandler.getMessagePosts(s);//			HashMap<String, Object> map;//			String url, title, large_url, description, desc;//			ArrayList<HashMap<String, Object>> array = new ArrayList<HashMap<String, Object>>();//			for (int i = 0; i < listAdapter.GetmData().size(); i++)//				array.add(listAdapter.GetmData().get(i));////			for (MessagePost p : djs) {//				// map = new HashMap<String, Object>();//				// url = p.getUrl();//				// large_url = p.getLargeUrl();//				// title = p.getName();//				// description = p.getDescription();//				// desc = description;//				// if (description.length() > 29) {//				// desc = description.substring(0, 28);//				// desc += "...";//				// }//				// map.put("weibo_url", p.getWeibo_url());//				// map.put("url", large_url);//				// map.put("imgsrc", MyConstants.SITE + url);//				// map.put("desc", desc);//				// map.put("title", title);//				// map.put("description", description);//				map = getDJMap(p);//				array.add(map);//			}//			last_dj_id += djs.size();//			if (djs.size() == 0) {//				listHandler.obtainMessage(MyConstants.MSG_FAILURE).sendToTarget();//			} else {//				listHandler.obtainMessage(MyConstants.MSG_SUCCESS1, array)//						.sendToTarget();//			}		}		class OnMessagePostClickListener implements OnClickListener {			public void onClick(View v) {				try {					loadMoreButton.setText("查看更多...");					bottomFlag = false;					progressDialog.show();					build_post_list();					indicateMessageFollowedFlag = false;					 				} catch (JSONException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				}			}		};		private class OnMessageFollowedClickListener implements OnClickListener {			public void onClick(View v) {				try {					loadMoreButton.setText(R.string._more);					bottomFlag = false;					progressDialog.show();					build_followed_list();					indicateMessageFollowedFlag = true;									} catch (JSONException e) {					e.printStackTrace();				} catch (IOException e) {					e.printStackTrace();				}			}		};}